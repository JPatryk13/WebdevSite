###########
# BUILDER #
###########

# pull official base image
FROM python:3.8.6-alpine AS builder

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# copy reqs file
COPY ./requirements/ ./requirements/

# upgrade pip
RUN pip install --upgrade pip

# add psycopg2 deps
RUN apk update \
    && apk add postgresql-dev gcc python3-dev musl-dev \
# add pillow deps
    && apk add build-base py-pip jpeg-dev zlib-dev

# map /lib to /usr/lib (deps folder) and install libraries
RUN LIBRARY_PATH=/lib:/usr/lib /bin/sh -c "pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements/prod.txt"

# copy project files
COPY . .

# lint (install and run flake8)
RUN pip install flake8
RUN flake8 --ignore=E501,F401 --exclude=virt/ .


#########
# FINAL #
#########

# pull official base image
FROM python:3.8.6-alpine

# create directory for the app
RUN mkdir -p /home/app

# create group 'app' for '/home/app' and add 'app' user to the group
RUN addgroup -S app && adduser -S app -G app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
RUN mkdir $APP_HOME/mediafiles

# set working directory
WORKDIR $APP_HOME

# install dependencies for Pillow (damn libjpeg...)
RUN apk update && apk add libpq libjpeg

# copy and requirements and wheels
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements/prod.txt .

# update pip and install requirements from wheels
RUN /usr/local/bin/python -m pip install --upgrade pip && pip install --no-cache /wheels/*

# copy entrypoint.prod
COPY ./entrypoint.prod.sh $APP_HOME

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run entrypoint.prod
# ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]

# run gunicorn
CMD gunicorn webdevsite.wsgi:application --bind 0.0.0.0:$PORT
